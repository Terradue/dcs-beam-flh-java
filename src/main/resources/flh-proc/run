#!/bin/sh

# source the ciop functions (e.g. ciop-log, ciop-getparam)
source ${ciop_job_include}

# define the exit codes
SUCCESS=0
ERR_BEAM=2
ERR_NOEXPR=3

# add a trap to exit gracefully
function cleanExit ()
{
   local retval=$?
   local msg=""
   case "$retval" in
     $SUCCESS)      msg="Processing successfully concluded";;
     $ERR_BEAM)    msg="Beam_expr failed to process product `basename $product`";;
     	$ERR_NOEXPR)	msg="No expression provided";;
	*)             msg="Unknown error";;
   esac
   [ "$retval" != "0" ] && ciop-log "ERROR" "Error $retval - $msg, processing aborted" || ciop-log "INFO" "$msg"
   exit $retval
}
trap cleanExit EXIT

# create the output folder to store the output products and export it
mkdir -p $TMPDIR/output
export OUTPUTDIR=$TMPDIR/output

# retrieve the arithmetic expression from the application descriptor file
# its default value is defined in the expression job template. This default value can be overidden in the expression node section of the workflow definition
# ciop-getparam will take the default value if the workflow does not define it
expression="`ciop-getparam expression`"

# log the value, it helps debugging. 
# the log entry is available in the process stderr 
ciop-log "DEBUG" "The expression used is: $expression"

# run a check on the expression value, it can't be empty
[ -z "$expression" ] && exit $ERR_NOEXPR

# to retrieve data from ESA G-POD
export X509_USER_PROXY=/application/fbrito-key.pem
export X509_CERT_DIR=/application

# loop and process all MERIS products
# the expression node definition defines the source of products as a catalogue series
# a query to the catalogue is done through its OpenSearch interface using two parameters: starttime and endtime 
# the result will be the URL entries (in RDF format) to all MERIS Level 1 Reduced Resolution (MER_RR__1P) whose acquisition times are inside the interval defined by start/end times
# the query can be run on the shell with the opensearch-client utility:
# opensearch-client -p time:start=2012-04-02 -p time:end=2012-04-06 http://localhost/catalogue/sandbox/MER_RR__1P/description
# an example of such URL is http://localhost/catalogue/sandbox/MER_RR__1P/MER_RR__1PRLRA20120406_102429_000026213113_00238_52838_0211.N1/rdf

while read inputfile 
do
	# report activity in log
	ciop-log "INFO" "Retrieving $inputfile from storage"

	# retrieve the MER_RR__1P product to the local temporary folder TMPDIR provided by the framework (this folder is only used by this process)
	# the ciop-copy utility will use one of online resource available in the metadata to copy it to the TMPDIR folder
	# the utility returns the local path so the variable $retrieved contains the local path to the MERIS product
	retrieved=`ciop-copy -o $TMPDIR "$inputfile"`
	
	# check if the file was retrieved, if not exit with the error code $ERR_NOINPUT
	[ "$?" == "0" -a -e "$retrieved" ] || exit $ERR_NOINPUT
	
	# report activity in the log
	ciop-log "INFO" "Retrieved `basename $retrieved`, moving on to expression"

	# invoke the application beam_expr.sh with:
	# - the outputdir location defined above
	# - the expression retrieved with ciop-getparam
	# - the band
	# - the MERIS local path (copied from the archive with ciop-copy
	# the script beam_expr.sh applies the arithmetric expression to the input product, compress the result (.tgz) and will write it to the $OUTPUTDIR 
	$_CIOP_APPLICATION_PATH/expression/bin/beam_expr.sh -o $OUTPUTDIR -e "$expression" -b out $retrieved 1>&2 

	# check the exit code
	[ "$?" != "0" ] && exit $ERR_BEAM 

	# publish the result 
	# ciop-publish copies the beam_expr.sh result to a distributed filesystem
	ciop-log "INFO" "Publishing result"	
	ciop-publish $OUTPUTDIR/*.tgz
	
	# cleanup. Free the local directory space by deleting the input MERIS Level 1 product (copied with ciop-copy) and 
	# the result of the beam_expr.sh execution (the compressed archive in $OUTPUTDIR)
	rm -fr $retrieved $OUTPUTDIR/*.tgz 

done

exit 0
